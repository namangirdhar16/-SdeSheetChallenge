#include <bits/stdc++.h> 
long long merge(long long *arr, int l, int mid, int r) {
    long long aux[r - l + 1];
    long long sub_cnt = 0;
    int i = l, j = mid + 1, k = 0;
  //  cout << l << " " << r << endl;
    while(i <= mid && j <= r) {
        if(arr[i] <= arr[j]) {
            aux[k++] = arr[i++];
        }
        else {
            int cnt = mid - i + 1;
            sub_cnt += cnt;
            aux[k++] = arr[j++];
        }
    }
    while(i <= mid) {
        aux[k++] = arr[i++];
    }
    while(j <= r) {
        aux[k++] = arr[j++];
    }
    k = 0;
    for(int i = l; i <= r; i++) {
       arr[i] = aux[k++];
    }
    return sub_cnt;
}
long long mergeSort(long long *arr, int l, int r) {
    long long inv_cnt = 0;
    if(l < r) {
        inv_cnt += mergeSort(arr, l, (r + l) / 2);
        inv_cnt += mergeSort(arr, (r + l) / 2 + 1, r);
        inv_cnt += merge(arr, l, (r + l) / 2, r);
        return inv_cnt;
    }
    return inv_cnt;
}
long long getInversions(long long *arr, int n){
    // Write your code here.
    long long ans = mergeSort(arr, 0, n - 1);
    return ans;
    
}
